dir
testing<-read.csv(file="Set B C_Labels.csv",head=TRUE,sep=",")
DTmodFit <- train(ACtion ~., method="rpart", data=training)
DTmodFit <- train(ACtion ~., method="rpart", data=training)
testing<-read.csv(file="Set B C_Labels.csv",head=TRUE,sep=",")
testing<-read.csv(file="Set B C_Labels.csv",head=TRUE,sep=",")
training<-read.csv(file="Set A C_Labels.csv",head=TRUE,sep=",")
testing$ACTION <- as.factor(testing$ACTION)
training$ACTION<-as.factor(training$ACTION)
DTmodFit <- train(ACtion ~., method="rpart", data=training)
pml_write_files = function(X){}
pml_write_files = function(X){ n=length(x) }
pml_write_files = function(X){ n=length(x)
}
pml_write_files = function(X){
n=length(x)
for(i in 1:n){}
filename = paste0("probelm_id_",i,".txt")
write.table(x[i],file=filename, quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
require(RandomForest)
install.packages("RandomForest")
install.packages("randomForest")
require(RandomForest)
require(randomForest)
RFmodFit <-train(ACTION ~., method="rf", trcontrol=trainControl(method="cv", number=10),data=training)
RFmodFit <-train(ACTION ~., method="rf", trcontrol=trainControl(method="cv", number=10),data=training)
install.packages("rattle")
RFmodFit <-train(ACTION ~., method="rf", trcontrol=trainControl(method="cv", number=10),data=training)
install.packages("kernlab")
RFmodFit <-train(ACTION ~., method="rf", trcontrol=trainControl(method="cv", number=10),data=training)
View(pml_write_files)
par()
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab =
"Month"
, ylab =
"Ozone (ppb)"
)
par("lty")
par("col")
par("nrow")
par("lwd")
par("xlab")
par(bg)
par()
par$bg
par(bg)
par("bg")
par("bg")
with(airquality, plot(Wind, Ozone))
title(main =
"Ozone and Wind in New York City"
)
## Add a title
title(main =
"Ozone and Wind in Kuala Lumpur City"
)
## Add a title
with(airquality, plot(Wind, Ozone))
title(main =
"Ozone and Wind in Kuala Lumpur City"
)
## Add a title
with(subset(airquality, Month ==
5
), points(Wind, Ozone, col =
"blue"
))
with(airquality, plot(Wind, Ozone, main =
"Ozone and Wind in New York City"
,
type =
"n"
))
with(subset(airquality, Month ==
5
), points(Wind, Ozone, col =
"blue"
))
with(subset(airquality, Month !=
5
), points(Wind, Ozone, col =
"red"
))
legend(
"topright"
, pch =
1
, col = c(
"blue"
,
"red"
), legend = c(
"May"
,
"Other Months"
))
with(airquality, plot(Wind, Ozone, main =
"Ozone and Wind in New York City"
,
pch =
20
))
with(airquality, plot(Wind, Ozone, main =
"Ozone and Wind in New York City"
,
pch =
100
))
with(airquality, plot(Wind, Ozone, main =
"Ozone and Wind in New York City"
,
pch =
50
))
with(airquality, plot(Wind, Ozone, main =
"Ozone and Wind in New York City"
,
pch =
10
))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd =
2
)
abline(model, lwd =
20
)
abline(model, lwd =
10
)
abline(model, lwd =
5
)
with(airquality, plot(Wind, Ozone, main =
"Ozone and Wind in New York City"
,
pch =
10
))
abline(model, lwd =
5
)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mena(temp)
mean(temp)
qunif(p=0.75, min=0, max=1)
Ppregnant_pos = 0.75*0.30/(0.75*0.30+0.48*0.70)
round(Ppregnant_pos*100)
swirl
library(swirl)
swirl()
unique()
help
info
sapply(flags)
hlp
exit
quit
info
help("aggregate")
help("tapply")
#### Missing Values
NA_count <- nrow(subset(datasource, is.na(datasource$steps)))
NA_count
#### Missing Value Replacement Strategy (Using Mean)
#### creating new dataframe from original copy
datasource_xNA <- datasource
#extract index of NAs
indexNa <- is.na(datasource_xNA$steps)
#calculate avg for the interval
avg <- tapply(datasource$steps, datasource$interval, mean, na.rm=TRUE, simplify=T)
#Replace missing steps (NA) with avg value
datasource_xNA$steps[indexNa] <- avg[as.character(datasource_xNA$interval[indexNa])]
setwd("~/Personal/BIG DATA/John Hopkin Data Science/5-Reproducible Research/Assignment 1")
exit
quit
exit
help
0
info()
bye
bye()
setwd("~/Personal/BIG DATA/John Hopkin Data Science/5-Reproducible Research/Assignment 1")
#### Missing Values
NA_count <- nrow(subset(datasource, is.na(datasource$steps)))
NA_count
#### Missing Value Replacement Strategy (Using Mean)
#### creating new dataframe from original copy
datasource_xNA <- datasource
#extract index of NAs
indexNa <- is.na(datasource_xNA$steps)
#calculate avg for the interval
avg <- tapply(datasource$steps, datasource$interval, mean, na.rm=TRUE, simplify=T)
#Replace missing steps (NA) with avg value
datasource_xNA$steps[indexNa] <- avg[as.character(datasource_xNA$interval[indexNa])]
---
output:
html_document:
fig_caption: yes
keep_md: yes
---
#Reproducible Research : Assignment1
This assignment makes use of data from a personal activity monitoring device. This device collects data at 5 minute intervals through out the day. The data consists of two months of data from an anonymous individual collected during the months of October and November, 2012 and include the number of steps taken in 5 minute intervals each day.
The data for this assignment can be downloaded from the course web site:
Dataset: Activity monitoring data [52K]
The variables included in this dataset are:
steps: Number of steps taking in a 5-minute interval (missing values are coded as NA)
date: The date on which the measurement was taken in YYYY-MM-DD format
interval: Identifier for the 5-minute interval in which measurement was taken
The dataset is stored in a comma-separated-value (CSV) file and there are a total of 17,568 observations in this dataset.
##loading library
```{r}
library(ggplot2)
library(knitr)
```
#### Reading Data
```{r}
##Assuming the raw dataset(.zip) downloaded into the working directory
unzip("repdata_data_activity.zip", overwrite = T)
##Reading data
datasource <- read.csv ('activity.csv', header = TRUE, sep = ",",
colClasses=c("numeric", "character", "numeric"))
```
#### Preprocessing - Formating date(as date) and interval (as factor)
```{r}
datasource$date <- as.Date(datasource$date, format = "%Y-%m-%d")
datasource$interval <- as.factor(datasource$interval)
```
#### Accumulating total step/day and creating day vs step_perday table
```{r}
steps_perday <- aggregate(steps ~ date, datasource, sum)
colnames(steps_perday) <- c("date","steps")
head(steps_perday)
```
#### Drawing Histogram for total steps/day
```{r, fig.keep='all'}
hist(x=steps_perday$steps ,col="green",breaks=20,xlab="Total Steps/Day",
ylab="Frequency",
main="The Distribution of Total Steps/Day")
```
####MEan and Median
```{r}
##CALCULATING mean
mean (steps_perday$steps, na.rm=TRUE)
##CALCULATING median
median(steps_perday$steps, na.rm=TRUE)
```
####PATTERN AVERAGE PER INTERVAL , use integer to ensure smooth time series plot
```{r}
steps_per_interval <- aggregate(list(steps=datasource$steps),   by=list(interval=as.integer(datasource$interval)), FUN=mean,na.rm=TRUE)
head(steps_per_interval)
```
####Plotting Timeseries for PAttern
```{r, fig.keep='all'}
plot(steps_per_interval$interval,
steps_per_interval$steps,
xlab="5 minutes intervals", ylab="Average steps per Interval",type="l")
```
####Maximum Steps
```{r}
maximum_steps <- max(steps_per_interval$steps)
max_interval <- steps_per_interval[steps_per_interval$steps==maximum_steps,]
max_interval
```
#### Missing Values
NA_count <- nrow(subset(datasource, is.na(datasource$steps)))
NA_count
#### Missing Value Replacement Strategy (Using Mean)
#### creating new dataframe from original copy
datasource_xNA <- datasource
#extract index of NAs
indexNa <- is.na(datasource_xNA$steps)
#calculate avg for the interval
avg <- tapply(datasource$steps, datasource$interval, mean, na.rm=TRUE, simplify=T)
#Replace missing steps (NA) with avg value
datasource_xNA$steps[indexNa] <- avg[as.character(datasource_xNA$interval[indexNa])]
#### creating new dataframe from original copy
datasource_xNA <- datasource
#extract index of NAs
indexNa <- is.na(datasource_xNA$steps)
#calculate avg for the interval
avg <- tapply(datasource$steps, datasource$interval, mean, na.rm=TRUE, simplify=T)
#Replace missing steps (NA) with avg value
datasource_xNA$steps[indexNa] <- avg[as.character(datasource_xNA$interval[indexNa])]
avg
datasource_xNA$steps
head (datasource_xNA)
is.na(datasource_xNA)
NA_count <- nrow(subset(datasource_xNA, is.na(datasource_xNA$steps)))
NA_count
```{r}
steps_perday2 <- aggregate(steps ~ date, datasource_xNA, sum)
colnames(steps_perday) <- c("date","steps")
head(steps_perday)
```
#### Drawing Histogram for total steps/day
```{r}
hist(x=steps_perday2$steps ,col="green",breaks=20,xlab="Total Steps/Day",
ylab="Frequency",
main="The Distribution of Total Steps/Day (NA=mean)")
```
|  Before (NA)   | XNA_mean | XNa_median |
```{r}
##CALCULATING mean
NA_mean <- mean (steps_perday$steps, na.rm=TRUE)
##CALCULATING median
Na_median(steps_perday$steps, na.rm=TRUE)
##CALCULATING mean
XNA_mean <- mean (steps_perday2$steps, na.rm=TRUE)
##CALCULATING median
XNa_median(steps_perday2$steps, na.rm=TRUE)
| State          |    Mean    |    Median    |
|----------------|------------|--------------|
|  Before (NA)   | 'XNA_mean' | 'XNa_median' |
| After(NA=Mean) | 'Na_median'| 'Na_median'  |
```
####Mean and MEdian Compared
```{r}
##CALCULATING mean
NA_mean <- mean(steps_perday$steps, na.rm=TRUE)
##CALCULATING median
Na_median <- median(steps_perday$steps, na.rm=TRUE)
##CALCULATING mean
XNA_mean <- mean(steps_perday2$steps, na.rm=TRUE)
##CALCULATING median
XNa_median <- median(steps_perday2$steps, na.rm=TRUE)
| State          |    Mean    |    Median    |
|----------------|------------|--------------|
|  Before (NA)   | `XNA_mean` | `XNa_median` |
| After(NA=Mean) | `Na_median`| `Na_median`  |
| State          |    Mean    |    Median    |
|--------------------------------------------|
|  Before (NA)   | `XNA_mean` | `XNa_median` |
| After(NA=Mean) | `Na_median`| `Na_median`  |
```
```{r}
| State          |    Mean    |    Median    |
|----------------|------------|--------------|
|  Before (NA)   | 'XNA_mean' | 'XNa_median' |
| After(NA=Mean) | 'Na_mean'  | 'Na_median'  |
```
Na_median
NA_mean
```{r}
| State          |    Mean    |    Median    |
|----------------|------------|--------------|
|  Before (NA)   | 'XNA_mean' | 'XNa_median' |
| After(NA=Mean) | 'Na_mean'  | 'Na_median'  |
```
